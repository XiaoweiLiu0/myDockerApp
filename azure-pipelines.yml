# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

variables:
  - template: variables.yml
  - name: vmImageName
    value: 'ubuntu-latest'

resources:
- repo: self
    
stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: ${{ variables.imageRepository }}
        dockerfile: $(dockerfilePath)
        containerRegistry: ${{ variables.dockerRegistryServiceConnection }}
        tags: |
          $(tag)
    - task: AzureCLI@2
      displayName: "Helm Save & Push"
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          appVersion="$(tag)"
          echo "App version: $appVersion"
          export HELM_EXPERIMENTAL_OCI=1
          echo $servicePrincipalKey | helm registry login $(acrUrl) --username $servicePrincipalId --password-stdin
          rm -rf *.tgz
          helm chart save $(helm package --app-version "$appVersion" --version $(helmTag) . | grep -o '/.*.tgz') $(acrUrl)/helm/$(repoName)
          helm chart push $(acrUrl)/helm/$(repoName):$(helmTag)
          helm chart remove $(acrUrl)/helm/$(repoName):$(helmTag)
        addSpnToEnvironment: true
        workingDirectory: "helm/"
  - deployment: "Deploy"
    displayName: "Deploy"
    environment: deploy-test
    dependsOn: ["Build"]
    timeoutInMinutes: 300
    strategy:
      runOnce:
        deploy:
          steps:
            - download: none
            - checkout: none
            - task: AzureCLI@2
              displayName: "Helm upgrade"
              inputs:
                azureSubscription: ${{ variables.azureSubscription }}
                scriptType: bash
                scriptLocation: inlineScript
                inlineScript: |
                  export HELM_EXPERIMENTAL_OCI=1
                  az aks get-credentials --name $(aksName) --resource-group $(aksResourceGroup)
                  kubectl config use-context $(aksName)
                  echo $servicePrincipalKey | helm registry login $(acrUrl) --username $servicePrincipalId --password-stdin
                  helm chart pull $(acrUrl)/helm/$(repoName):$(helmTag)
                  rm -rf ./charts
                  helm chart export $(acrUrl)/helm/$(repoName):$(helmTag) --destination ./charts
                  cd ./charts/hello
                  helm upgrade -f values.yaml --install --create-namespace --wait $(repoName) .
                addSpnToEnvironment: true